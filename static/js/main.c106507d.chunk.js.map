{"version":3,"sources":["components/p2pt.js","components/p2wiki.js","components/Search.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["WebSocketTracker","require","randombytes","EventEmitter","sha1","debug","P2PT","announceURLs","identifierString","trackers","peers","msgChunks","responseWaiting","setIdentifier","_peerIdBuffer","_peerId","toString","_peerIdBinary","this","infoHash","sync","toLowerCase","_infoHashBuffer","Buffer","from","_infoHashBinary","$this","on","peer","newpeer","id","channelName","emit","data","JSON","parse","slice","respond","_peerRespond","chunkHandler","_chunkHandler","_destroyChunks","e","console","log","err","removePeer","_fetchPeers","length","msg","msgID","Promise","resolve","reject","Math","floor","random","connected","Error","chunks","remaining","c","last","send","stringify","key","announce","numwant","key2","destroy","join","opts","uploaded","downloaded","module","exports","WebTorrent","parallel","P2Wiki","proxyPeers","proxyPeersID","curProxyPeerIndex","seedingTorrents","wt","p2pt","catch","error","articleName","encodeURIComponent","makeArticleTorrent","then","torrent","start","setInterval","torrentInfo","timeNow","Date","lastActive","TORRENT_REMOVE_TIMEOUT","response","push","peerID","indexOf","files","fetched","title","article","media","mediaCount","ifCompletedMakeTorrent","seed","announceList","name","axios","get","file","window","File","text","type","addMedia","scale","url","method","responseType","filename","item","items","srcset","src","callback","errorCallback","requestMorePeers","responseInfoHashes","checkConsensus","downloadTorrent","infoHashes","infoHashesFrequency","onTorrent","forEach","add","Searchbar","props","handleChange","bind","handleSubmit","getFromWiki","state","query","result","beAProxy","retryInterval","location","hostname","p2wiki","localStorage","getItem","startProxy","startClient","that","spli","document","pathname","split","setTimeout","urloli","requestArticle","res","getBuffer","buffer","setState","clearInterval","preventDefault","value","target","checked","setItem","reload","onSubmit","style","paddingBottom","className","onChange","marginLeft","textAlign","placeholder","dangerouslySetInnerHTML","html","images","DOMParser","parseFromString","querySelectorAll","i","URL","href","firstChild","renderTo","__html","body","innerHTML","createMarkup","Component","Main","color","fontSize","Search","App","Boolean","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c106507d.chunk.js","sourcesContent":["/**\n * Peer 2 Peer with webTorrents\n * Copyright Subin Siby <mail@subinsb.com>, 2020\n */\n\nconst WebSocketTracker = require('bittorrent-tracker/lib/client/websocket-tracker')\nconst randombytes = require('randombytes')\nconst EventEmitter = require('events')\nconst sha1 = require('simple-sha1')\nconst debug = require('debug')('p2pt')\n\n/**\n * This character would be prepended to easily identify JSON msgs\n */\nconst JSON_MESSAGE_IDENTIFIER = 'p'\n\n/**\n * WebRTC data channel limit beyond which data is split into chunks\n * Chose 16KB considering Chromium\n */\nconst MAX_MESSAGE_LENGTH = 16000\n\nclass P2PT extends EventEmitter {\n  /**\n   *\n   * @param array announceURLs List of announce tracker URLs\n   * @param string identifierString Identifier used to discover peers in the network\n   */\n  constructor (announceURLs = [], identifierString = '') {\n    super()\n\n    this.announceURLs = announceURLs\n    this.trackers = {}\n    this.peers = {}\n    this.msgChunks = {}\n    this.responseWaiting = {}\n\n    if (identifierString) { this.setIdentifier(identifierString) }\n\n    this._peerIdBuffer = randombytes(20)\n    this._peerId = this._peerIdBuffer.toString('hex')\n    this._peerIdBinary = this._peerIdBuffer.toString('binary')\n  }\n\n  /**\n   * Set the identifier string used to discover peers in the network\n   * @param string identifierString\n   */\n  setIdentifier (identifierString) {\n    this.identifierString = identifierString\n    this.infoHash = sha1.sync(identifierString).toLowerCase()\n    this._infoHashBuffer = Buffer.from(this.infoHash, 'hex')\n    this._infoHashBinary = this._infoHashBuffer.toString('binary')\n  }\n\n  /**\n   * Connect to network and start discovering peers\n   */\n  start () {\n    const $this = this\n\n    this.on('peer', (peer) => {\n      var newpeer = false\n      if (!$this.peers[peer.id]) {\n        newpeer = true\n        $this.peers[peer.id] = {}\n        $this.responseWaiting[peer.id] = {}\n      }\n\n      peer.on('connect', () => {\n        /**\n         * Multiple data channels to one peer is possible\n         * The `peer` object actually refers to a peer with a data channel. Even though it may have same `id` (peerID) property, the data channel will be different. Different trackers giving the same \"peer\" will give the `peer` object with different channels.\n         * We will store all channels as backups in case any one of them fails\n         * A peer is removed if all data channels become unavailable\n         */\n        $this.peers[peer.id][peer.channelName] = peer\n\n        if (newpeer) {\n          $this.emit('peerconnect', peer)\n        }\n      })\n\n      peer.on('data', (data) => {\n        $this.emit('data', peer, data)\n\n        data = data.toString()\n\n        debug('got a message from ' + peer.id)\n\n        if (data[0] === JSON_MESSAGE_IDENTIFIER) {\n          try {\n            data = JSON.parse(data.slice(1))\n\n            // A respond function\n            peer.respond = $this._peerRespond(peer, data.id)\n\n            var chunkHandler = $this._chunkHandler(data)\n\n            if (chunkHandler !== false) {\n              /**\n               * If there's someone waiting for a response, call them\n               */\n              if ($this.responseWaiting[peer.id][data.id]) {\n                $this.responseWaiting[peer.id][data.id]([peer, chunkHandler])\n                delete $this.responseWaiting[peer.id][data.id]\n              } else {\n                $this.emit('msg', peer, chunkHandler)\n              }\n              $this._destroyChunks(data.id)\n            }\n          } catch (e) {\n            console.log(e)\n          }\n        }\n      })\n\n      peer.on('error', (err) => {\n        $this.removePeer(peer)\n        debug('Error in connection : ' + err)\n      })\n\n      peer.on('close', () => {\n        $this.removePeer(peer)\n        debug('Connection closed with ' + peer.id)\n      })\n    })\n\n    this._fetchPeers()\n  }\n\n  /**\n   * Remove a peer from the list if all channels are closed\n   * @param integer id Peer ID\n   */\n  removePeer (peer) {\n    delete this.peers[peer.id][peer.channelName]\n\n    // All data channels are gone. Peer lost\n    if (this.peers[peer.id].length === 0) {\n      this.emit('peerclose', peer)\n\n      delete this.responseWaiting[peer.id]\n      delete this.peers[peer.id]\n    }\n  }\n\n  /**\n   * Send a msg and get response for it\n   * @param Peer peer simple-peer object to send msg to\n   * @param string msg Message to send\n   * @param integer msgID ID of message if it's a response to a previous message\n   */\n  send (peer, msg, msgID = '') {\n    const $this = this\n\n    return new Promise((resolve, reject) => {\n      var data = {\n        id: msgID !== '' ? msgID : Math.floor(Math.random() * 100000 + 100000),\n        msg: msg\n      }\n\n      try {\n        /**\n         * Maybe peer channel is closed, so use a different channel if available\n         * Array should atleast have one channel, otherwise peer connection is closed\n         */\n        if (!peer.connected) {\n          peer = $this.peers[peer.id][0]\n        }\n\n        $this.responseWaiting[peer.id][data.id] = resolve\n      } catch {\n        return reject(Error('Connection to peer closed'))\n      }\n\n      var chunks = 0\n      var remaining = ''\n      while (data.msg.length > 0) {\n        data.c = chunks\n\n        remaining = data.msg.slice(MAX_MESSAGE_LENGTH)\n        data.msg = data.msg.slice(0, MAX_MESSAGE_LENGTH)\n\n        if (!remaining) { data.last = true }\n\n        peer.send(JSON_MESSAGE_IDENTIFIER + JSON.stringify(data))\n\n        data.msg = remaining\n        chunks++\n      }\n\n      debug('sent a message to ' + peer.id)\n    })\n  }\n\n  /**\n   * Request more peers\n   */\n  requestMorePeers () {\n    const $this = this\n    return new Promise((resolve) => {\n      for (var key in $this.trackers) {\n        $this.trackers[key].announce({\n          numwant: 50\n        })\n      }\n      resolve($this.peers)\n    })\n  }\n\n  /**\n   * Destroy object\n   */\n  destroy () {\n    var key\n    for (key in this.peers) {\n      for (var key2 in this.peers[key]) {\n        this.peers[key][key2].destroy()\n      }\n    }\n    for (key in this.trackers) {\n      this.trackers[key].destroy()\n    }\n  }\n\n  /**\n   * A custom function binded on Peer object to easily respond back to message\n   * @param Peer peer Peer to send msg to\n   * @param integer msgID Message ID\n   */\n  _peerRespond (peer, msgID) {\n    var $this = this\n    return (msg) => {\n      return $this.send(peer, msg, msgID)\n    }\n  }\n\n  /**\n   * Handle msg chunks. Returns false until the last chunk is received. Finally returns the entire msg\n   * @param object data\n   */\n  _chunkHandler (data) {\n    if (!this.msgChunks[data.id]) {\n      this.msgChunks[data.id] = []\n    }\n\n    this.msgChunks[data.id][data.c] = data.msg\n\n    if (data.last) {\n      var completeMsg = this.msgChunks[data.id].join('')\n      return completeMsg\n    } else {\n      return false\n    }\n  }\n\n  /**\n   * Remove all stored chunks of a particular message\n   * @param integer msgID Message ID\n   */\n  _destroyChunks (msgID) {\n    delete this.msgChunks[msgID]\n  }\n\n  /**\n   * Default announce options\n   * @param object opts Options\n   */\n  _defaultAnnounceOpts (opts = {}) {\n    if (opts.numwant == null) opts.numwant = 50\n\n    if (opts.uploaded == null) opts.uploaded = 0\n    if (opts.downloaded == null) opts.downloaded = 0\n\n    return opts\n  }\n\n  /**\n   * Initialize trackers and fetch peers\n   */\n  _fetchPeers () {\n    for (var key in this.announceURLs) {\n      this.trackers[key] = new WebSocketTracker(this, this.announceURLs[key])\n      this.trackers[key].announce({\n        numwant: 50\n      })\n    }\n  }\n}\n\nmodule.exports = P2PT\n","import axios from 'axios'\n\nconst WebTorrent = require('webtorrent')\nconst parallel = require('run-parallel')\nconst P2PT = require('./p2pt')\nconst debug = require('debug')('p2wiki')\n\n/**\n * For client peers\n * How many peers should return the same infoHash to start downloading the torrent ?\n */\nconst TORRENT_OK_CONSENSUS_COUNT = 1\n\n/**\n * For both client & proxy peers\n * How many minutes should an article torrent be kept seeding if nobody is downloading it\n */\nconst TORRENT_REMOVE_TIMEOUT = 2\n\nexport class P2Wiki {\n  constructor (announceURLs) {\n    this.announceURLs = announceURLs\n\n    this.proxyPeers = {}\n    this.proxyPeersID = []\n    this.curProxyPeerIndex = 0\n\n    this.seedingTorrents = {}\n\n    this.wt = new WebTorrent()\n    this.p2pt = new P2PT(announceURLs, 'p2wiki')\n  }\n\n  startProxy () {\n    const $this = this\n\n    this.p2pt.on('msg', (peer, msg) => {\n      if (msg === 'c') {\n        // Yes, I'm a proxy\n        peer.respond('p').catch((err) => {\n          console.error('Connection to client failed before handsahake. ' + err)\n        })\n      } else {\n        try {\n          msg = JSON.parse(msg)\n          var articleName = encodeURIComponent(msg.articleName)\n\n          console.log('Got request for article ' + articleName)\n\n          $this.makeArticleTorrent(msg.articleName).then((torrent) => {\n            peer.respond(torrent.infoHash)\n          }).catch((error) => {\n            console.log('Torrent creation failed : ' + error)\n\n            // Torrent creation failed\n            delete $this.seedingTorrents[articleName]\n          })\n        } catch (e) {\n          console.log(e)\n        }\n      }\n    })\n    this.p2pt.start()\n\n    parallel([\n      () => {\n        setInterval(() => {\n          var minutes = TORRENT_REMOVE_TIMEOUT * 60 * 1000\n          var timeNow = new Date()\n          var torrentInfo\n          for (var key in $this.seedingTorrents) {\n            torrentInfo = $this.seedingTorrents[key]\n            if (torrentInfo.lastActive && timeNow - torrentInfo.lastActive > minutes) {\n              torrentInfo.torrent.destroy()\n            }\n          }\n        }, 10000)\n      }\n    ])\n  }\n\n  startClient () {\n    const $this = this\n    this.p2pt.on('peerconnect', (peer) => {\n      $this.p2pt.send(\n        peer,\n        'c'\n      ).then(([peer, response]) => {\n        console.log(peer.id)\n        if (response === 'p') {\n          if ($this.proxyPeers[peer.id]) {\n            peer.destroy()\n          } else {\n            $this.proxyPeers[peer.id] = peer\n            $this.proxyPeersID.push(peer.id)\n          }\n        }\n      })\n    })\n\n    this.p2pt.on('peerclose', (peerID) => {\n      delete $this.proxyPeers[peerID]\n      delete $this.proxyPeersID[this.proxyPeersID.indexOf(peerID)]\n    })\n    this.p2pt.start()\n  }\n\n  getAProxyPeer () {\n    if (this.proxyPeersID.length === 0) { return false }\n\n    if (this.curProxyPeerIndex > this.proxyPeersID.length - 1) { this.curProxyPeerIndex = 0 }\n\n    return this.proxyPeers[this.proxyPeersID[this.curProxyPeerIndex]]\n  }\n\n  makeArticleTorrent (articleName) {\n    const $this = this\n\n    return new Promise((resolve, reject) => {\n      articleName = encodeURIComponent(articleName)\n\n      if ($this.seedingTorrents[articleName]) {\n        if ($this.seedingTorrents[articleName].torrent) {\n          resolve($this.seedingTorrents[articleName].torrent)\n        }\n        return\n      }\n\n      // Started making torrent\n      $this.seedingTorrents[articleName] = {}\n\n      var files = []\n      var fetched = {\n        title: '',\n        article: false,\n        media: [],\n        mediaCount: 0\n      }\n\n      var ifCompletedMakeTorrent = () => {\n        if (fetched.article && fetched.media.length === fetched.mediaCount) {\n          $this.wt.seed(files, {\n            announceList: [$this.announceURLs],\n            name: fetched.title\n          }, (torrent) => {\n            $this.seedingTorrents[articleName] = {\n              lastActive: new Date(),\n              torrent: torrent\n            }\n\n            torrent.on('upload', () => {\n              $this.seedingTorrents[articleName].lastActive = new Date()\n            })\n\n            debug(`Started seeding article '${articleName}' : ${torrent.infoHash}`)\n\n            resolve(torrent)\n          })\n        }\n      }\n\n      axios.get(`//en.wikipedia.org/w/api.php?action=parse&format=json&page=${articleName}&prop=text&formatversion=2&origin=*`).then(response => {\n        var file = new window.File([response.data.parse.text], 'article.html', { type: 'text/html' })\n        files.push(file)\n\n        fetched.title = response.data.parse.title\n        fetched.article = true\n\n        debug(`Article ${articleName} : Fetched text`)\n\n        ifCompletedMakeTorrent()\n      }).catch((error) => {\n        reject(error)\n      })\n\n      var addMedia = (title, scale, url) => {\n        axios({\n          method: 'get',\n          url: url,\n          responseType: 'blob'\n        }).then(function (response) {\n          var filename = title\n          var file = new window.File([response.data], filename)\n\n          files.push(file)\n          fetched.media.push(filename)\n\n          debug(`Article ${articleName} : Fetched image ${fetched.media.length}/${fetched.mediaCount}`)\n\n          ifCompletedMakeTorrent()\n        }).catch(error => {\n          reject(error)\n        })\n      }\n\n      axios.get(`//en.wikipedia.org/api/rest_v1/page/media-list/${articleName}`).then(response => {\n        var item\n        for (var key in response.data.items) {\n          item = response.data.items[key]\n\n          // Skip non-images\n          if (!item.srcset) {\n            continue\n          }\n\n          addMedia(item.title, item.srcset[0].scale, item.srcset[0].src)\n          fetched.mediaCount++\n        }\n\n        debug(`Article ${articleName} : Fetched medialist. Has ${fetched.mediaCount} images`)\n      }).catch(error => {\n        reject(error)\n      })\n    })\n  }\n\n  requestArticle (articleName, callback, errorCallback) {\n    this.p2pt.requestMorePeers()\n\n    if (this.proxyPeers.length === 0) {\n      return false\n    }\n\n    const $this = this\n\n    var peer\n    var responseInfoHashes = []\n\n    for (var key in this.proxyPeers) {\n      peer = this.proxyPeers[key]\n\n      this.p2pt.send(peer, JSON.stringify({\n        articleName: articleName\n      })).then(([peer, response]) => {\n        // response will be torrent infohash\n        responseInfoHashes.push(response)\n        var infoHash = $this.checkConsensus(responseInfoHashes)\n\n        if (infoHash) {\n          $this.downloadTorrent(infoHash, callback)\n        }\n      })\n    }\n  }\n\n  checkConsensus (infoHashes) {\n    var infoHashesFrequency = {}\n    var infoHash\n\n    for (var key in infoHashes) {\n      infoHash = infoHashes[key]\n      if (!infoHashesFrequency[infoHash]) {\n        infoHashesFrequency[infoHash] = 0\n      }\n      infoHashesFrequency[infoHash]++\n\n      if (infoHashesFrequency[infoHash] >= TORRENT_OK_CONSENSUS_COUNT) {\n        return infoHash\n      }\n    }\n    return false\n  }\n\n  downloadTorrent (infoHash, callback) {\n    var onTorrent = (torrent) => {\n      var article = {\n        title: '',\n        text: null,\n        media: {}\n      }\n\n      torrent.files.forEach(file => {\n        if (file.name === 'article.html') {\n          article.title = torrent.name\n          article.text = file\n        } else {\n          article.media[file.name] = file\n        }\n      })\n\n      callback(article)\n    }\n\n    if (this.wt.get(infoHash)) {\n      onTorrent(this.wt.get(infoHash))\n    } else {\n      this.wt.add(infoHash, {\n        announce: this.announceURLs\n      }, onTorrent)\n    }\n  }\n}\n","import React, { Component } from 'react'\nimport { P2Wiki } from './p2wiki'\n\nclass Searchbar extends Component {\n  constructor (props) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n    this.getFromWiki = this.getFromWiki.bind(this)\n\n    this.state = {\n      title: '',\n      query: '',\n      result: '',\n      beAProxy: false\n    }\n\n    this.media = {}\n\n    this.retryInterval = null\n\n    var announceURLs = [\n      'wss://tracker.openwebtorrent.com',\n      'wss://tracker.sloppyta.co:443/announce',\n      'wss://tracker.novage.com.ua:443/announce',\n      'wss://tracker.btorrent.xyz:443/announce'\n    ]\n\n    if (window.location.hostname === 'localhost') { announceURLs = ['ws://localhost:5000'] }\n\n    this.p2wiki = new P2Wiki(announceURLs)\n\n    if (window.localStorage.getItem('beAProxy') === 'true') {\n      this.state.beAProxy = true\n      this.p2wiki.startProxy()\n    } else {\n      this.p2wiki.startClient()\n    }\n\n    var that = this\n    var url = document.location.pathname\n    var spli = url.split('/')\n\n    if (spli.length > 2 && spli[spli.length - 2] === 'wiki') {\n      setTimeout(function () {\n        that.urloli(spli[spli.length - 1])\n        that.getFromWiki()\n      }, 1000)\n    }\n  }\n\n  getFromWiki () {\n    if (this.state.query !== '') {\n      var $this = this\n\n      if (\n        this.p2wiki.requestArticle(\n          this.state.query,\n          function (res) {\n            $this.media = res.media\n            res.text.getBuffer((error, buffer) => {\n              $this.setState({\n                title: res.title,\n                result: buffer.toString()\n              })\n              if (error) { console.log(error) }\n            })\n          }\n        ) === false\n      ) {\n        console.log('nopeer, retrying in 3 seconds')\n        clearInterval(this.retryInterval)\n        this.retryInterval = setTimeout(this.getFromWiki, 3000)\n      }\n    }\n  }\n\n  handleSubmit (e) {\n    e.preventDefault()\n    console.log(this.state.query)\n\n    this.getFromWiki()\n  };\n\n  handleChange (e) {\n    const value =\n      e.target.type === 'checkbox' ? e.target.checked : e.target.value\n    this.setState({\n      [e.target.name]: value\n    })\n\n    if (e.target.name === 'beAProxy') {\n      window.localStorage.setItem('beAProxy', value)\n      window.location.reload()\n    }\n  }\n\n  urloli (e) {\n    this.setState({\n      query: e\n    })\n  }\n\n  render () {\n    const $this = this\n    const createMarkup = (html) => {\n      var parser = new window.DOMParser()\n      html = parser.parseFromString(html, 'text/html')\n\n      const images = html.querySelectorAll(\"a[class='image']\")\n      var filename\n      for (let i = 0; i < images.length; i++) {\n        filename = new URL(images[i].href).pathname.slice(6)\n\n        images[i].firstChild.src = ''\n\n        if ($this.media[filename]) {\n          $this.media[filename].renderTo(images[i].firstChild)\n        }\n      }\n\n      return { __html: html.body.innerHTML }\n    }\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <label style={{ paddingBottom:'15px' }} className='checkbox'>\n            <input\n              type='checkbox'\n              onChange={this.handleChange}\n              name='beAProxy'\n              checked={this.state.beAProxy}\n            />\n            <span style={{ marginLeft: '5px' }}>Be a Proxy Peer</span>\n          </label>\n          <div className='field'>\n            <div style={{textAlign: 'center'}} className='control'>\n              <input\n                className='input is-rounded'\n                id='query'\n                type='Text'\n                placeholder='🔍 Search for an article'\n                onChange={this.handleChange}\n                name='query'\n                value={this.state.query}\n              />\n            </div>\n          </div>\n        </form>\n        <div className='container mx-auto'>\n          <h1 className='title text-4xl'>{this.state.title}</h1>\n          <div dangerouslySetInnerHTML={createMarkup(this.state.result)} />\n        </div>\n      </div>\n    )\n  }\n}\nexport default Searchbar\n","import React, {Component} from 'react';\nimport Searchbar from './Search';\n\nimport './Main.scss';\n\nclass Main extends Component {\n  render() {\n    return (\n      <>\n        <div style={{textAlign: 'center'}}>\n          <h1 style={{color:`royalblue`, fontSize: '50px'}}>P2Wiki</h1>\n          <Searchbar/>\n        </div>\n        <footer className=\"footer\">\n          <div style={{textAlign: 'center'}}>\n            <p style={{color:`hotpink`}}>\n              P2Wiki made by Subin Siby, Pranav Shridhar and Athul Cyriac Ajay\n            </p>\n          </div>\n        </footer>\n      </>\n    );\n  }\n}\n\nexport default Main;","import React from 'react';\nimport './App.scss';\n\nimport Main from './components/Main';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}