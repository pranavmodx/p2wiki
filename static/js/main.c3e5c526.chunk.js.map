{"version":3,"sources":["components/p2wiki.js","components/Search.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["WebTorrent","require","debug","P2Wiki","announceURLs","this","proxyPeers","proxyPeersID","curProxyPeerIndex","wt","p2pt","P2PT","$this","on","peer","msg","respond","catch","err","console","error","JSON","parse","log","articleName","makeArticleTorrent","then","torrent","infoHash","e","start","send","id","push","peerID","indexOf","length","Promise","resolve","reject","files","fetched","title","article","media","mediaCount","encodeURIComponent","ifCompletedMakeTorrent","seed","announceList","name","axios","get","response","file","window","File","data","text","type","addMedia","scale","url","method","responseType","filename","item","key","items","srcset","src","callback","errorCallback","requestMorePeers","getAProxyPeer","stringify","add","announce","forEach","Searchbar","props","handleChange","bind","handleSubmit","getFromWiki","state","query","result","beAProxy","retryInterval","location","hostname","p2wiki","localStorage","getItem","startProxy","startClient","that","spli","document","pathname","split","setTimeout","urloli","requestArticle","res","getBuffer","buffer","setState","toString","clearInterval","preventDefault","value","target","checked","setItem","reload","onSubmit","style","paddingBottom","className","onChange","marginLeft","textAlign","placeholder","dangerouslySetInnerHTML","html","images","DOMParser","parseFromString","querySelectorAll","i","URL","href","slice","firstChild","renderTo","__html","body","innerHTML","createMarkup","Component","Main","color","fontSize","Search","App","Boolean","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c3e5c526.chunk.js","sourcesContent":["import axios from 'axios'\nimport P2PT from 'p2pt'\n\nconst WebTorrent = require('webtorrent')\nconst debug = require('debug')('p2wiki')\n\nexport class P2Wiki {\n  constructor (announceURLs) {\n    this.proxyPeers = {}\n    this.proxyPeersID = []\n    this.curProxyPeerIndex = 0\n    this.announceURLs = announceURLs\n\n    this.wt = new WebTorrent()\n    this.p2pt = new P2PT(announceURLs, 'p2wiki')\n  }\n\n  startProxy () {\n    const $this = this\n\n    this.p2pt.on('msg', (peer, msg) => {\n      if (msg === 'c') {\n        // Yes, I'm a proxy\n        peer.respond('p').catch((err) => {\n          console.error('Connection to client failed before handsahake. ' + err)\n        })\n      } else {\n        try {\n          msg = JSON.parse(msg)\n\n          console.log('Got request for article ' + msg.articleName)\n\n          $this.makeArticleTorrent(msg.articleName).then((torrent) => {\n            peer.respond(torrent.infoHash)\n          })\n        } catch (e) {\n          console.log(e)\n        }\n      }\n    })\n    this.p2pt.start()\n  }\n\n  startClient () {\n    const $this = this\n    this.p2pt.on('peerconnect', (peer) => {\n      $this.p2pt.send(\n        peer,\n        'c'\n      ).then(([peer, response]) => {\n        if (response === 'p') {\n          $this.proxyPeers[peer.id] = peer\n          $this.proxyPeersID.push(peer.id)\n        }\n      })\n    })\n\n    this.p2pt.on('peerclose', (peerID) => {\n      delete $this.proxyPeers[peerID]\n      delete $this.proxyPeersID[this.proxyPeersID.indexOf(peerID)]\n    })\n    this.p2pt.start()\n  }\n\n  getAProxyPeer () {\n    if (this.proxyPeersID.length === 0) { return false }\n\n    if (this.curProxyPeerIndex > this.proxyPeersID.length - 1) { this.curProxyPeerIndex = 0 }\n\n    return this.proxyPeers[this.proxyPeersID[this.curProxyPeerIndex]]\n  }\n\n  makeArticleTorrent (articleName) {\n    const $this = this\n\n    return new Promise((resolve, reject) => {\n      var files = []\n      var fetched = {\n        title: '',\n        article: false,\n        media: [],\n        mediaCount: 0\n      }\n      articleName = encodeURIComponent(articleName)\n\n      var ifCompletedMakeTorrent = () => {\n        if (fetched.article && fetched.media.length === fetched.mediaCount) {\n          $this.wt.seed(files, {\n            announceList: [$this.announceURLs],\n            name: fetched.title\n          }, (torrent) => {\n            resolve(torrent)\n          })\n        }\n      }\n\n      axios.get(`//en.wikipedia.org/w/api.php?action=parse&format=json&page=${articleName}&prop=text&formatversion=2&origin=*`).then(response => {\n        var file = new window.File([response.data.parse.text], 'article.html', { type: 'text/html' })\n        files.push(file)\n\n        fetched.title = response.data.parse.title\n        fetched.article = true\n\n        debug(`Article ${articleName} : Fetched text`)\n\n        ifCompletedMakeTorrent()\n      }).catch((error) => {\n        reject(error)\n      })\n\n      var addMedia = (title, scale, url) => {\n        axios({\n          method: 'get',\n          url: url,\n          responseType: 'blob'\n        }).then(function (response) {\n          var filename = title\n          var file = new window.File([response.data], filename)\n\n          files.push(file)\n          fetched.media.push(filename)\n\n          debug(`Article ${articleName} : Fetched image ${fetched.media.length}/${fetched.mediaCount}`)\n\n          ifCompletedMakeTorrent()\n        }).catch(error => {\n          reject(error)\n        })\n      }\n\n      axios.get(`//en.wikipedia.org/api/rest_v1/page/media-list/${articleName}`).then(response => {\n        var item\n        for (var key in response.data.items) {\n          item = response.data.items[key]\n\n          // Skip non-images\n          if (!item.srcset) {\n            continue\n          }\n\n          addMedia(item.title, item.srcset[0].scale, item.srcset[0].src)\n          fetched.mediaCount++\n        }\n\n        debug(`Article ${articleName} : Fetched medialist. Has ${fetched.mediaCount} images`)\n      }).catch(error => {\n        reject(error)\n      })\n    })\n  }\n\n  requestArticle (articleName, callback, errorCallback) {\n    this.p2pt.requestMorePeers()\n    var peer = this.getAProxyPeer()\n\n    if (!peer) {\n      return false\n    }\n\n    const $this = this\n    this.p2pt.send(peer, JSON.stringify({\n      articleName: articleName\n    })).then(([peer, response]) => {\n      // response will be torrent infohash\n      $this.wt.add(response, {\n        announce: $this.announceURLs\n      }, (torrent) => {\n        var article = {\n          title: '',\n          text: null,\n          media: {}\n        }\n\n        torrent.files.forEach(file => {\n          if (file.name === 'article.html') {\n            article.title = torrent.name\n            article.text = file\n          } else {\n            article.media[file.name] = file\n          }\n        })\n\n        callback(article)\n      })\n    })\n  }\n}\n","import React, { Component } from 'react'\nimport { P2Wiki } from './p2wiki'\n\nclass Searchbar extends Component {\n  constructor (props) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n    this.getFromWiki = this.getFromWiki.bind(this)\n\n    this.state = {\n      title: '',\n      query: '',\n      result: '',\n      beAProxy: false\n    }\n\n    this.media = {}\n\n    this.retryInterval = null\n\n    var announceURLs = [\n      'wss://tracker.openwebtorrent.com',\n      'wss://tracker.sloppyta.co:443/announce',\n      'wss://tracker.novage.com.ua:443/announce',\n      'wss://tracker.btorrent.xyz:443/announce'\n    ]\n\n    if (window.location.hostname === 'localhost') { announceURLs = ['ws://localhost:5000'] }\n\n    this.p2wiki = new P2Wiki(announceURLs)\n\n    if (window.localStorage.getItem('beAProxy') === 'true') {\n      this.state.beAProxy = true\n      this.p2wiki.startProxy()\n    } else {\n      this.p2wiki.startClient()\n    }\n\n    var that = this\n    var url = document.location.pathname\n    var spli = url.split('/')\n\n    if (spli.length > 2 && spli[spli.length - 2] === 'wiki') {\n      setTimeout(function () {\n        that.urloli(spli[spli.length - 1])\n        that.getFromWiki()\n      }, 1000)\n    }\n  }\n\n  getFromWiki () {\n    if (this.state.query !== '') {\n      var $this = this\n\n      if (\n        this.p2wiki.requestArticle(\n          this.state.query,\n          function (res) {\n            $this.media = res.media\n            res.text.getBuffer((error, buffer) => {\n              $this.setState({\n                title: res.title,\n                result: buffer.toString()\n              })\n              if (error) { console.log(error) }\n            })\n          }\n        ) === false\n      ) {\n        console.log('nopeer, retrying in 3 seconds')\n        clearInterval(this.retryInterval)\n        this.retryInterval = setTimeout(this.getFromWiki, 3000)\n      }\n    }\n  }\n\n  handleSubmit (e) {\n    e.preventDefault()\n    console.log(this.state.query)\n\n    this.getFromWiki()\n  };\n\n  handleChange (e) {\n    const value =\n      e.target.type === 'checkbox' ? e.target.checked : e.target.value\n    this.setState({\n      [e.target.name]: value\n    })\n\n    if (e.target.name === 'beAProxy') {\n      window.localStorage.setItem('beAProxy', value)\n      window.location.reload()\n    }\n  }\n\n  urloli (e) {\n    this.setState({\n      query: e\n    })\n  }\n\n  render () {\n    const $this = this\n    const createMarkup = (html) => {\n      var parser = new window.DOMParser()\n      html = parser.parseFromString(html, 'text/html')\n\n      const images = html.querySelectorAll(\"a[class='image']\")\n      var filename\n      for (let i = 0; i < images.length; i++) {\n        filename = new URL(images[i].href).pathname.slice(6)\n\n        images[i].firstChild.src = ''\n\n        if ($this.media[filename]) {\n          $this.media[filename].renderTo(images[i].firstChild)\n        }\n      }\n\n      return { __html: html.body.innerHTML }\n    }\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <label style={{ paddingBottom:'15px' }} className='checkbox'>\n            <input\n              type='checkbox'\n              onChange={this.handleChange}\n              name='beAProxy'\n              checked={this.state.beAProxy}\n            />\n            <span style={{ marginLeft: '5px' }}>Be a Proxy Peer</span>\n          </label>\n          <div className='field'>\n            <div style={{textAlign: 'center'}} className='control'>\n              <input\n                className='input is-rounded'\n                id='query'\n                type='Text'\n                placeholder='🔍 Search for an article'\n                onChange={this.handleChange}\n                name='query'\n                value={this.state.query}\n              />\n            </div>\n          </div>\n        </form>\n        <div className='container mx-auto'>\n          <h1 className='title text-4xl'>{this.state.title}</h1>\n          <div dangerouslySetInnerHTML={createMarkup(this.state.result)} />\n        </div>\n      </div>\n    )\n  }\n}\nexport default Searchbar\n","import React, {Component} from 'react';\nimport Searchbar from './Search';\n\nimport './Main.scss';\n\nclass Main extends Component {\n  render() {\n    return (\n      <>\n        <div style={{textAlign: 'center'}}>\n          <h1 style={{color:`royalblue`, fontSize: '50px'}}>P2Wiki</h1>\n          <Searchbar/>\n        </div>\n        <footer className=\"footer\">\n          <div style={{textAlign: 'center'}}>\n            <p style={{color:`hotpink`}}>\n              P2Wiki made by Subin Siby, Pranav Shridhar and Athul Cyriac Ajay\n            </p>\n          </div>\n        </footer>\n      </>\n    );\n  }\n}\n\nexport default Main;","import React from 'react';\nimport './App.scss';\n\nimport Main from './components/Main';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}