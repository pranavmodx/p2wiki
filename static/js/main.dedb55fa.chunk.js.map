{"version":3,"sources":["components/p2p.js","components/Search.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Discovery","require","randombytes","WebTorrent","announce","discoveryOpts","infoHash","peerId","localStorage","getItem","client","f","File","seed","torrent","console","log","on","peer","data","j","JSON","parse","axios","get","q","then","res","send","stringify","catch","err","alert","e","getFromWiki","callback","msg","gotPeer","Promise","resolve","reject","source","json","Error","messagePeer","response","error","Searchbar","props","state","query","that","setState","title","result","text","handleSubmit","preventDefault","handleChange","bind","beAProxy","setTimeout","url","document","URL","spliurl","split","slice","pop","urloli","value","target","type","checked","this","name","setItem","window","location","reload","html","className","onSubmit","id","onChange","htmlFor","placeholder","dangerouslySetInnerHTML","__html","React","Component","Main","style","color","Search","App","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dedb55fa.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst Discovery = require('torrent-discovery')\nconst randombytes = require('randombytes')\nconst WebTorrent = require('webtorrent')\n\nconst announce = [\n  'wss://tracker.openwebtorrent.com',\n  'wss://tracker.sloppyta.co:443/announce',\n  'wss://tracker.novage.com.ua:443/announce'\n]\nconst infoHash = '62f753362edbfcc2f59593a050bf271d20dec9d2'\n\nconst discoveryOpts = {\n  infoHash: infoHash,\n  peerId: randombytes(20),\n  announce: announce\n}\n\nif (localStorage.getItem('beAProxy') === \"true\") {\n  // Proxy\n\n  // Seed the torrent\n  var client = new WebTorrent()\n\n  var f = new File(['p2wiki'], 'p2wiki')\n\n  client.seed(f, {\n    announce: announce\n  }, (torrent) => {\n    // Will be 62f753362edbfcc2f59593a050bf271d20dec9d2\n    console.log(torrent.infoHash)\n\n    torrent.on('peer', (peer) => {\n      peer.on('data', data => {\n        // got a data channel message\n        console.log('got a message from cpeer: ' + data)\n\n        try {\n          var j = JSON.parse(data)\n          axios.get(`//en.wikipedia.org/w/api.php?action=parse&format=json&page=${j.q}&prop=text&formatversion=2`).then(res => {\n            console.log(res)\n            peer.send(JSON.stringify(res))\n          }).catch((err) => {\n            console.log(err)\n            alert('Not Found- Try with a more Specific Title')\n          })\n        } catch (e) {\n          console.log('non JSON data')\n        }\n      })\n    })\n  })\n}\n\nfunction messagePeer (msg, callback) {\n  var gotPeer = false\n  return new Promise(function (resolve, reject) {\n    var discovery = new Discovery(discoveryOpts)\n    discovery.on('peer', (peer, source) => {\n      if (gotPeer) return\n      \n      peer.on('data', data => {\n        try {\n          var json = JSON.parse(data)\n          resolve(json)\n        } catch (e) {\n          console.log('non JSON data')\n        }\n      })\n\n      peer.on('connect', () => {\n        peer.send(msg)\n      })\n\n      peer.on('error', err => {\n        gotPeer = false\n        reject(Error(err))\n      })\n      gotPeer = true\n    })\n  })\n}\n\nexport function getFromWiki (q, callback) {\n  messagePeer(\n    JSON.stringify({ q: q })\n  ).then(response => {\n    callback(response)\n  }, error => {\n    console.log(error)\n  })\n}\n","import React from 'react'\n//import axios from 'axios';\nimport { Label } from '@rebass/forms'\n//import { Box, Button } from \"rebass\"\nimport {getFromWiki} from './p2p'\n\n\n// class Searchbar = (props) => {\nclass Searchbar extends React.Component {\n    constructor(props) {\n        super(props)\n        this.handleChange=this.handleChange.bind(this);\n        this.handleSubmit=this.handleSubmit.bind(this)\n        this.state = {\n            title: \"\",\n            query: \"\",\n            result:\"\",\n            beAProxy: false\n        }\n        \n        if (localStorage.getItem('beAProxy') === \"true\") {\n            this.state.beAProxy = true\n\n            var that = this\n            setTimeout(function() {\n                let url=document.URL\n                if (url!==\"http://localhost:3000/wiki\")\n                {\n                    let spli=url.split(\"/\")\n                    let spliurl=spli.slice(-1).pop()\n\n                    that.urloli(spliurl)\n                }\n                that.getFromWiki()\n            }, 5000)\n        }\n    }\n    getFromWiki = () => {\n        if (this.state.query !== '') {\n            var that = this\n            getFromWiki(this.state.query, function(res) {\n                that.setState({\n                    title: res.data.parse.title,\n                    result: res.data.parse.text,\n                });\n            })\n        }\n    }\n    handleSubmit = (e) => {\n        e.preventDefault();\n        console.log(this.state.query)\n\n        this.getFromWiki()\n        /**\n        axios.get(`http://en.wikipedia.org/w/api.php?action=parse&format=json&page=${this.state.query}&prop=query&formatversion=2`).then(res => {\n            console.log(res.data)\n            this.setState({\n                title: res.data.parse.title,\n                result: res.data.parse.query,\n            });\n        }).catch((err)=>{alert(\"Not Found- Try with a more Specific Title\")});*/\n    }\n    handleChange(e){\n        const value = e.target.type === 'checkbox' ? e.target.checked : e.target.value;\n        this.setState({\n            [e.target.name]: value\n        });\n\n        if (e.target.name === 'beAProxy') {\n            localStorage.setItem('beAProxy', value)\n            window.location.reload()\n        }\n    }\n    urloli(e){\n        this.setState({\n            query: e\n        });\n    }\n    render() {\n        let createMarkup=(html)=> {\n            //console.log(query)\n            return {__html:html}\n        }\n        return (\n        <div className=\"text-center md:flex md:items-center mb-6\">\n            <form className=\"w-full max-w-sm\" onSubmit={this.handleSubmit}>\n                <input type=\"checkbox\" id=\"beAProxy\" onChange={this.handleChange} name=\"beAProxy\" checked={this.state.beAProxy} />\n                <label htmlFor=\"beAProxy\">Be A Proxy Peer</label>\n            \n                <div className=\"w-full max-w-sm\">\n                    <Label className=\"text-2xl text-gray-600 font-bold mb-1 md:mb-0 pr-4\" htmlFor='query'>Search for Wikipedia Articles</Label>\n                    <input\n                    id='query'\n                    type='Text'\n                    placeholder='🔍 Search'\n                    onChange={this.handleChange}\n                    name=\"query\"\n                    value={this.state.query}\n                    className=\" text-4xl bg-gray-200 appearance-none border-4 border-gray-200 rounded  py-2 px-4 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-red-500\"\n                    />\n                </div>\n            </form>\n            <div className=\"container is-fluid\">\n                <h1 className=\"title\">{this.state.title}</h1>\n                <div dangerouslySetInnerHTML={createMarkup(this.state.result)}/>\n            </div>\n        </div>);\n    }\n}\nexport default Searchbar\n","import React, {Component} from 'react';\n//import axios from \"axios\";\nimport Searchbar from './Search';\n\nclass Main extends Component {\n  render() {\n    return (\n      <>\n      <div>\n      \t<h1 style={{color:`royalblue`}} className=\"font-mono text-6xl text-center\">P2Wiki</h1>\n        <Searchbar/>\n      </div>\n      <footer className=\"footer\">\n      <div className=\"content has-text-centered\">\n        <p className=\"font-mono text-1xl p-8\" style={{color:`hotpink`}}>\n          P2Wiki made by Subin Siby, Pranav Shridhar and Athul Cyriac Ajay\n        </p>\n      </div>\n    </footer>\n    </>\n    );\n  }\n}\n\nexport default Main;","import React from 'react';\n//import logo from './logo.svg';\n//import Searchbar from './components/Search'\nimport './App.css';\n\n//import Logo from './components/Logo';\n//import Search from './components/Search';\nimport Main from './components/Main';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}