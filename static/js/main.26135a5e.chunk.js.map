{"version":3,"sources":["components/p2wiki.js","components/Search.js","components/Main.js","App.js","serviceWorker.js","index.js","components/p2pt.js"],"names":["P2Wiki","announceURLs","this","proxyPeers","proxyPeersID","curProxyPeerIndex","p2pt","P2PT","on","peer","msg","respond","catch","err","console","error","JSON","parse","axios","get","articleName","then","res","log","stringify","e","start","$this","send","id","push","peerID","indexOf","length","callback","errorCallback","search","getAProxyPeer","response","Searchbar","props","handleChange","bind","handleSubmit","getFromWiki","state","title","query","result","beAProxy","retryInterval","window","location","hostname","p2wiki","localStorage","getItem","startProxy","startClient","that","spli","document","pathname","split","setTimeout","urloli","requestArticle","setState","data","text","clearInterval","preventDefault","value","target","type","checked","name","setItem","reload","html","onSubmit","className","onChange","style","marginLeft","placeholder","dangerouslySetInnerHTML","__html","React","Component","Main","textAlign","color","fontSize","Search","App","Boolean","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","WebSocketTracker","require","randombytes","EventEmitter","sha1","debug","identifierString","peers","msgChunks","setIdentifier","_peerIdBuffer","_peerId","toString","_peerIdBinary","infoHash","sync","toLowerCase","_infoHashBuffer","Buffer","from","_infoHashBinary","emit","slice","_peerRespond","chunkHandler","_chunkHandler","removePeer","_fetchPeers","msgID","Promise","resolve","reject","connected","Error","Math","floor","random","responseCallback","responseData","removeListener","_destroyChunks","chunks","remaining","c","last","join","opts","numwant","uploaded","downloaded","key","announce"],"mappings":"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","file":"static/js/main.26135a5e.chunk.js","sourcesContent":["import axios from 'axios'\n\nimport P2PT from './p2pt'\n\nexport class P2Wiki {\n  constructor (announceURLs) {\n    this.proxyPeers = {}\n    this.proxyPeersID = []\n    this.curProxyPeerIndex = 0\n\n    this.p2pt = new P2PT(announceURLs, 'p2wiki')\n  }\n\n  startProxy () {\n    this.p2pt.on('msg', (peer, msg) => {\n      if (msg === 'c') {\n        // Yes, I'm a proxy\n        peer.respond('p').catch((err) => {\n          console.error('Connection to client failed before handsahake. ' + err)\n        })\n      } else {\n        try {\n          msg = JSON.parse(msg)\n\n          axios.get(`//en.wikipedia.org/w/api.php?action=parse&format=json&page=${msg.articleName}&prop=text&formatversion=2&origin=*`).then(res => {\n            console.log(res)\n\n            peer.respond(JSON.stringify(res))\n          }).catch((err) => {\n            console.log(err)\n          })\n        } catch (e) {\n          console.log(e)\n        }\n      }\n    })\n    this.p2pt.start()\n  }\n\n  startClient () {\n    const $this = this\n    this.p2pt.on('peerconnect', (peer) => {\n      $this.p2pt.send(\n        peer,\n        'c'\n      ).then(([peer, response]) => {\n        if (response === 'p') {\n          $this.proxyPeers[peer.id] = peer\n          $this.proxyPeersID.push(peer.id)\n        }\n      })\n    })\n\n    this.p2pt.on('peerclose', (peerID) => {\n      delete $this.proxyPeers[peerID]\n      delete $this.proxyPeersID[this.proxyPeersID.indexOf(peerID)]\n    })\n    // TODO: Peer close remove\n    this.p2pt.start()\n  }\n\n  getAProxyPeer () {\n    if (this.proxyPeersID.length === 0) { return false }\n\n    if (this.curProxyPeerIndex > this.proxyPeersID.length - 1) { this.curProxyPeerIndex = 0 }\n\n    return this.proxyPeers[this.proxyPeersID[this.curProxyPeerIndex]]\n  }\n\n  requestArticle (articleName, callback, errorCallback) {\n    this.p2pt.search()\n    var peer = this.getAProxyPeer()\n\n    if (!peer) {\n      return false\n    }\n\n    this.p2pt.send(peer, JSON.stringify({\n      articleName: articleName\n    })).then(([peer, response]) => {\n      try {\n        callback(JSON.parse(response))\n      } catch (e) {\n        console.log(e)\n      }\n    })\n  }\n}\n","import React from 'react'\n// import axios from 'axios';\n// import { Label } from \"@rebass/forms\";\n// import { Box, Button } from \"rebass\"\nimport { P2Wiki } from './p2wiki'\n\n// class Searchbar = (props) => {\nclass Searchbar extends React.Component {\n  constructor (props) {\n    super(props)\n    this.handleChange = this.handleChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n    this.getFromWiki = this.getFromWiki.bind(this)\n    this.state = {\n      title: '',\n      query: '',\n      result: '',\n      beAProxy: false\n    }\n\n    this.retryInterval = null\n\n    var announceURLs = [\n      'ws://localhost:5000',\n      'wss://tracker.openwebtorrent.com',\n      'wss://tracker.sloppyta.co:443/announce',\n      'wss://tracker.novage.com.ua:443/announce'\n    ]\n\n    if (window.location.hostname === 'localhost') { announceURLs = ['ws://localhost:5000'] }\n\n    this.p2wiki = new P2Wiki(announceURLs)\n\n    if (window.localStorage.getItem('beAProxy') === 'true') {\n      this.state.beAProxy = true\n\n      this.p2wiki.startProxy()\n    } else {\n      this.p2wiki.startClient()\n    }\n\n    var that = this\n    var url = document.location.pathname\n    var spli = url.split('/')\n\n    if (spli.length > 2 && spli[spli.length - 2] === 'wiki') {\n      setTimeout(function () {\n        that.urloli(spli[spli.length - 1])\n        that.getFromWiki()\n      }, 1000)\n    }\n  }\n\n  getFromWiki () {\n    if (this.state.query !== '') {\n      var that = this\n\n      if (\n        this.p2wiki.requestArticle(\n          this.state.query,\n          function (res) {\n            that.setState({\n              title: res.data.parse.title,\n              result: res.data.parse.text\n            })\n          }\n        ) === false\n      ) {\n        console.log('nopeer, retrying in 3 seconds')\n        clearInterval(this.retryInterval)\n        this.retryInterval = setTimeout(this.getFromWiki, 3000)\n      }\n    }\n  }\n\n  handleSubmit (e) {\n    e.preventDefault()\n    console.log(this.state.query)\n\n    this.getFromWiki()\n    /**\n        axios.get(`http://en.wikipedia.org/w/api.php?action=parse&format=json&page=${this.state.query}&prop=query&formatversion=2`).then(res => {\n            console.log(res.data)\n            this.setState({\n                title: res.data.parse.title,\n                result: res.data.parse.query,\n            });\n        }).catch((err)=>{alert(\"Not Found- Try with a more Specific Title\")});\n    */\n  };\n\n  handleChange (e) {\n    const value =\n      e.target.type === 'checkbox' ? e.target.checked : e.target.value\n    this.setState({\n      [e.target.name]: value\n    })\n\n    if (e.target.name === 'beAProxy') {\n      window.localStorage.setItem('beAProxy', value)\n      window.location.reload()\n    }\n  }\n\n  urloli (e) {\n    this.setState({\n      query: e\n    })\n  }\n\n  render () {\n    const createMarkup = (html) => {\n      // console.log(query)\n      return { __html: html }\n    }\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <label className='checkbox'>\n            <input\n              type='checkbox'\n              onChange={this.handleChange}\n              name='beAProxy'\n              checked={this.state.beAProxy}\n            />\n            <span style={{ marginLeft: '5px' }}>Be a Proxy Peer</span>\n          </label>\n          <div className='field'>\n            <div className='control'>\n              <input\n                className='input is-rounded'\n                id='query'\n                type='Text'\n                placeholder='🔍 Search for an article'\n                onChange={this.handleChange}\n                name='query'\n                value={this.state.query}\n              />\n            </div>\n          </div>\n        </form>\n        <div className='container mx-auto'>\n          <h1 className='title text-4xl'>{this.state.title}</h1>\n          <div dangerouslySetInnerHTML={createMarkup(this.state.result)} />\n        </div>\n      </div>\n    )\n  }\n}\nexport default Searchbar\n","import React, {Component} from 'react';\nimport Searchbar from './Search';\n\nimport './Main.scss';\n\nclass Main extends Component {\n  render() {\n    return (\n      <>\n        <div style={{textAlign: 'center'}}>\n          <h1 style={{color:`royalblue`, fontSize: '50px'}}>P2Wiki</h1>\n          <Searchbar/>\n        </div>\n        <footer className=\"footer\">\n          <div style={{textAlign: 'center'}}>\n            <p style={{color:`hotpink`}}>\n              P2Wiki made by Subin Siby, Pranav Shridhar and Athul Cyriac Ajay\n            </p>\n          </div>\n        </footer>\n      </>\n    );\n  }\n}\n\nexport default Main;","import React from 'react';\nimport './App.scss';\n\nimport Main from './components/Main';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","/**\n * Peer 2 Peer with webTorrents\n * Copyright Subin Siby <mail@subinsb.com>, 2020\n */\n\nconst WebSocketTracker = require('bittorrent-tracker/lib/client/websocket-tracker')\nconst randombytes = require('randombytes')\nconst EventEmitter = require('events')\nconst sha1 = require('simple-sha1')\nconst debug = require('debug')('p2pt')\n\n/**\n * This character would be prepended to easily identify JSON msgs\n */\nconst JSON_MESSAGE_IDENTIFIER = 'p'\n\n/**\n * WebRTC data channel limit beyond which data is split into chunks\n * Chose 16KB considering Chromium\n */\nconst MAX_MESSAGE_LENGTH = 16000\n\nclass P2PT extends EventEmitter {\n  constructor (announceURLs = [], identifierString = '') {\n    super()\n\n    this.announceURLs = announceURLs\n    this.peers = {}\n    this.msgChunks = {}\n\n    if (identifierString) { this.setIdentifier(identifierString) }\n\n    this._peerIdBuffer = randombytes(20)\n    this._peerId = this._peerIdBuffer.toString('hex')\n    this._peerIdBinary = this._peerIdBuffer.toString('binary')\n  }\n\n  setIdentifier (identifierString) {\n    this.identifierString = identifierString\n    this.infoHash = sha1.sync(identifierString).toLowerCase()\n    this._infoHashBuffer = Buffer.from(this.infoHash, 'hex')\n    this._infoHashBinary = this._infoHashBuffer.toString('binary')\n  }\n\n  start () {\n    const $this = this\n\n    this.on('peer', (peer) => {\n      peer.on('connect', () => {\n        $this.emit('peerconnect', peer)\n      })\n\n      peer.on('data', (data) => {\n        $this.emit('data', peer, data)\n\n        data = data.toString()\n\n        debug('got a message : ' + data)\n\n        if (data[0] === JSON_MESSAGE_IDENTIFIER) {\n          try {\n            data = JSON.parse(data.slice(1))\n\n            // A respond function\n            peer.respond = $this._peerRespond(peer, data.id)\n\n            var chunkHandler = $this._chunkHandler(data)\n\n            if (chunkHandler !== false) {\n              $this.emit('msg', peer, chunkHandler)\n            }\n          } catch (e) {\n            console.log(e)\n          }\n        }\n      })\n\n      peer.on('error', (err) => {\n        $this.removePeer(peer.id)\n        debug('Error in connection : ' + err)\n      })\n\n      peer.on('close', () => {\n        $this.removePeer(peer.id)\n        debug('Conncection closed')\n      })\n    })\n\n    this._fetchPeers()\n  }\n\n  removePeer (id) {\n    this.emit('peerclose', id)\n    delete this.peers[id]\n  }\n\n  /**\n   * Send a msg and get response for it\n   * @param SimplePeer peer Peer to send msg to\n   * @param string msg Message to send\n   * @param integer msgID ID of message if it's a response to a previous message\n   */\n  send (peer, msg, msgID = '') {\n    const $this = this\n    return new Promise((resolve, reject) => {\n      if (!peer.connected) {\n        reject(Error('closed'))\n      }\n\n      var data = {\n        id: msgID !== '' ? msgID : Math.floor(Math.random() * 100000 + 100000),\n        msg: msg\n      }\n\n      // TODO: Only listen callback if there's resolve i.e the caller expects a response and then only removeListener\n      var responseCallback = (responseData) => {\n        responseData = responseData.toString()\n        if (responseData[0] === JSON_MESSAGE_IDENTIFIER) {\n          try {\n            responseData = JSON.parse(responseData.slice(1))\n            if (responseData.id === data.id) {\n              var chunkHandler = $this._chunkHandler(responseData)\n\n              if (chunkHandler !== false) {\n                peer.removeListener('data', responseCallback)\n                $this._destroyChunks(data.id)\n\n                resolve([peer, chunkHandler])\n              }\n            }\n          } catch (e) {\n            console.log(e)\n          }\n        }\n      }\n\n      peer.on('data', responseCallback)\n\n      var chunks = 0\n      var remaining = ''\n      while (data.msg.length > 0) {\n        data.c = chunks\n\n        remaining = data.msg.slice(MAX_MESSAGE_LENGTH)\n        data.msg = data.msg.slice(0, MAX_MESSAGE_LENGTH)\n\n        if (!remaining) { data.last = true }\n\n        peer.send(JSON_MESSAGE_IDENTIFIER + JSON.stringify(data))\n\n        data.msg = remaining\n        chunks++\n      }\n    })\n  }\n\n  /**\n   * Find new peers\n   */\n  search () {\n    const $this = this\n    return new Promise((resolve) => {\n      this._fetchPeers()\n      resolve($this.peers)\n    })\n  }\n\n  _peerRespond (peer, msgID) {\n    var $this = this\n    return (msg) => {\n      return $this.send(peer, msg, msgID)\n    }\n  }\n\n  /**\n   * Handle msg chunks. Returns false until the last chunk is received. Finally returns the entire msg\n   * @param object data\n   */\n  _chunkHandler (data) {\n    if (!this.msgChunks[data.id]) {\n      this.msgChunks[data.id] = []\n    }\n\n    this.msgChunks[data.id][data.c] = data.msg\n\n    if (data.last) {\n      var completeMsg = this.msgChunks[data.id].join('')\n      return completeMsg\n    } else {\n      return false\n    }\n  }\n\n  _destroyChunks (msgID) {\n    delete this.msgChunks[msgID]\n  }\n\n  _defaultAnnounceOpts (opts = {}) {\n    if (opts.numwant == null) opts.numwant = 50\n\n    if (opts.uploaded == null) opts.uploaded = 0\n    if (opts.downloaded == null) opts.downloaded = 0\n\n    return opts\n  }\n\n  _fetchPeers () {\n    var tracker\n    for (var key in this.announceURLs) {\n      tracker = new WebSocketTracker(this, this.announceURLs[key])\n      tracker.announce({\n        numwant: 50\n      })\n    }\n  }\n}\n\nexport default P2PT\n"],"sourceRoot":""}