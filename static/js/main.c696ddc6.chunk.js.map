{"version":3,"sources":["components/p2wiki.js","components/Search.js","components/Main.js","App.js","serviceWorker.js","index.js","components/p2pt.js"],"names":["WebTorrent","require","parallel","debug","P2Wiki","announceURLs","this","proxyPeers","proxyPeersID","curProxyPeerIndex","seedingTorrents","wt","p2pt","P2PT","$this","on","peer","msg","respond","catch","err","console","error","JSON","parse","articleName","encodeURIComponent","log","makeArticleTorrent","then","torrent","infoHash","e","start","setInterval","torrentInfo","timeNow","Date","key","lastActive","TORRENT_REMOVE_TIMEOUT","destroy","send","response","id","push","peerID","indexOf","length","Promise","resolve","reject","files","fetched","title","article","media","mediaCount","ifCompletedMakeTorrent","seed","announceList","name","axios","get","file","window","File","data","text","type","addMedia","scale","url","method","responseType","filename","item","items","srcset","src","callback","errorCallback","requestMorePeers","responseInfoHashes","stringify","checkConsensus","downloadTorrent","infoHashes","infoHashesFrequency","onTorrent","forEach","add","announce","Searchbar","props","handleChange","bind","handleSubmit","getFromWiki","state","query","result","beAProxy","retryInterval","location","hostname","p2wiki","localStorage","getItem","startProxy","startClient","that","spli","document","pathname","split","setTimeout","urloli","requestArticle","res","getBuffer","buffer","setState","toString","clearInterval","preventDefault","value","target","checked","setItem","reload","onSubmit","style","paddingBottom","className","onChange","marginLeft","textAlign","placeholder","dangerouslySetInnerHTML","html","images","DOMParser","parseFromString","querySelectorAll","i","URL","href","slice","firstChild","renderTo","__html","body","innerHTML","createMarkup","Component","Main","color","fontSize","Search","App","Boolean","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","WebSocketTracker","randombytes","EventEmitter","sha1","identifierString","trackers","peers","msgChunks","responseWaiting","setIdentifier","_peerIdBuffer","_peerId","_peerIdBinary","sync","toLowerCase","_infoHashBuffer","Buffer","from","_infoHashBinary","newpeer","channelName","emit","_peerRespond","chunkHandler","_chunkHandler","_destroyChunks","removePeer","_fetchPeers","msgID","Math","floor","random","connected","Error","chunks","remaining","c","last","numwant","key2","join","opts","uploaded","downloaded"],"mappings":"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","file":"static/js/main.c696ddc6.chunk.js","sourcesContent":["import axios from 'axios'\nimport { P2PT } from './p2pt'\n\nconst WebTorrent = require('webtorrent')\nconst parallel = require('run-parallel')\nconst debug = require('debug')('p2wiki')\n\n/**\n * For client peers\n * How many peers should return the same infoHash to start downloading the torrent ?\n */\nconst TORRENT_OK_CONSENSUS_COUNT = 1\n\n/**\n * For both client & proxy peers\n * How many minutes should an article torrent be kept seeding if nobody is downloading it\n */\nconst TORRENT_REMOVE_TIMEOUT = 2\n\nexport class P2Wiki {\n  constructor (announceURLs) {\n    this.announceURLs = announceURLs\n\n    this.proxyPeers = {}\n    this.proxyPeersID = []\n    this.curProxyPeerIndex = 0\n\n    this.seedingTorrents = {}\n\n    this.wt = new WebTorrent()\n    this.p2pt = new P2PT(announceURLs, 'p2wiki')\n  }\n\n  startProxy () {\n    const $this = this\n\n    this.p2pt.on('msg', (peer, msg) => {\n      if (msg === 'c') {\n        // Yes, I'm a proxy\n        peer.respond('p').catch((err) => {\n          console.error('Connection to client failed before handsahake. ' + err)\n        })\n      } else {\n        try {\n          msg = JSON.parse(msg)\n          var articleName = encodeURIComponent(msg.articleName)\n\n          console.log('Got request for article ' + articleName)\n\n          $this.makeArticleTorrent(msg.articleName).then((torrent) => {\n            peer.respond(torrent.infoHash)\n          }).catch((error) => {\n            console.log('Torrent creation failed : ' + error)\n\n            // Torrent creation failed\n            delete $this.seedingTorrents[articleName]\n          })\n        } catch (e) {\n          console.log(e)\n        }\n      }\n    })\n    this.p2pt.start()\n\n    parallel([\n      () => {\n        setInterval(() => {\n          var minutes = TORRENT_REMOVE_TIMEOUT * 60 * 1000\n          var timeNow = new Date()\n          var torrentInfo\n          for (var key in $this.seedingTorrents) {\n            torrentInfo = $this.seedingTorrents[key]\n            if (torrentInfo.lastActive && timeNow - torrentInfo.lastActive > minutes) {\n              torrentInfo.torrent.destroy()\n            }\n          }\n        }, 10000)\n      }\n    ])\n  }\n\n  startClient () {\n    const $this = this\n    this.p2pt.on('peerconnect', (peer) => {\n      $this.p2pt.send(\n        peer,\n        'c'\n      ).then(([peer, response]) => {\n        console.log(peer.id)\n        if (response === 'p') {\n          if ($this.proxyPeers[peer.id]) {\n            peer.destroy()\n          } else {\n            $this.proxyPeers[peer.id] = peer\n            $this.proxyPeersID.push(peer.id)\n          }\n        }\n      })\n    })\n\n    this.p2pt.on('peerclose', (peerID) => {\n      delete $this.proxyPeers[peerID]\n      delete $this.proxyPeersID[this.proxyPeersID.indexOf(peerID)]\n    })\n    this.p2pt.start()\n  }\n\n  getAProxyPeer () {\n    if (this.proxyPeersID.length === 0) { return false }\n\n    if (this.curProxyPeerIndex > this.proxyPeersID.length - 1) { this.curProxyPeerIndex = 0 }\n\n    return this.proxyPeers[this.proxyPeersID[this.curProxyPeerIndex]]\n  }\n\n  makeArticleTorrent (articleName) {\n    const $this = this\n\n    return new Promise((resolve, reject) => {\n      articleName = encodeURIComponent(articleName)\n\n      if ($this.seedingTorrents[articleName]) {\n        if ($this.seedingTorrents[articleName].torrent) {\n          resolve($this.seedingTorrents[articleName].torrent)\n        }\n        return\n      }\n\n      // Started making torrent\n      $this.seedingTorrents[articleName] = {}\n\n      var files = []\n      var fetched = {\n        title: '',\n        article: false,\n        media: [],\n        mediaCount: 0\n      }\n\n      var ifCompletedMakeTorrent = () => {\n        if (fetched.article && fetched.media.length === fetched.mediaCount) {\n          $this.wt.seed(files, {\n            announceList: [$this.announceURLs],\n            name: fetched.title\n          }, (torrent) => {\n            $this.seedingTorrents[articleName] = {\n              lastActive: new Date(),\n              torrent: torrent\n            }\n\n            torrent.on('upload', () => {\n              $this.seedingTorrents[articleName].lastActive = new Date()\n            })\n\n            debug(`Started seeding article '${articleName}' : ${torrent.infoHash}`)\n\n            resolve(torrent)\n          })\n        }\n      }\n\n      axios.get(`//en.wikipedia.org/w/api.php?action=parse&format=json&page=${articleName}&prop=text&formatversion=2&origin=*`).then(response => {\n        var file = new window.File([response.data.parse.text], 'article.html', { type: 'text/html' })\n        files.push(file)\n\n        fetched.title = response.data.parse.title\n        fetched.article = true\n\n        debug(`Article ${articleName} : Fetched text`)\n\n        ifCompletedMakeTorrent()\n      }).catch((error) => {\n        reject(error)\n      })\n\n      var addMedia = (title, scale, url) => {\n        axios({\n          method: 'get',\n          url: url,\n          responseType: 'blob'\n        }).then(function (response) {\n          var filename = title\n          var file = new window.File([response.data], filename)\n\n          files.push(file)\n          fetched.media.push(filename)\n\n          debug(`Article ${articleName} : Fetched image ${fetched.media.length}/${fetched.mediaCount}`)\n\n          ifCompletedMakeTorrent()\n        }).catch(error => {\n          reject(error)\n        })\n      }\n\n      axios.get(`//en.wikipedia.org/api/rest_v1/page/media-list/${articleName}`).then(response => {\n        var item\n        for (var key in response.data.items) {\n          item = response.data.items[key]\n\n          // Skip non-images\n          if (!item.srcset) {\n            continue\n          }\n\n          addMedia(item.title, item.srcset[0].scale, item.srcset[0].src)\n          fetched.mediaCount++\n        }\n\n        debug(`Article ${articleName} : Fetched medialist. Has ${fetched.mediaCount} images`)\n      }).catch(error => {\n        reject(error)\n      })\n    })\n  }\n\n  requestArticle (articleName, callback, errorCallback) {\n    this.p2pt.requestMorePeers()\n\n    if (this.proxyPeers.length === 0) {\n      return false\n    }\n\n    const $this = this\n\n    var peer\n    var responseInfoHashes = []\n\n    for (var key in this.proxyPeers) {\n      peer = this.proxyPeers[key]\n\n      this.p2pt.send(peer, JSON.stringify({\n        articleName: articleName\n      })).then(([peer, response]) => {\n        // response will be torrent infohash\n        responseInfoHashes.push(response)\n        var infoHash = $this.checkConsensus(responseInfoHashes)\n\n        if (infoHash) {\n          $this.downloadTorrent(infoHash, callback)\n        }\n      })\n    }\n  }\n\n  checkConsensus (infoHashes) {\n    var infoHashesFrequency = {}\n    var infoHash\n\n    for (var key in infoHashes) {\n      infoHash = infoHashes[key]\n      if (!infoHashesFrequency[infoHash]) {\n        infoHashesFrequency[infoHash] = 0\n      }\n      infoHashesFrequency[infoHash]++\n\n      if (infoHashesFrequency[infoHash] >= TORRENT_OK_CONSENSUS_COUNT) {\n        return infoHash\n      }\n    }\n    return false\n  }\n\n  downloadTorrent (infoHash, callback) {\n    var onTorrent = (torrent) => {\n      var article = {\n        title: '',\n        text: null,\n        media: {}\n      }\n\n      torrent.files.forEach(file => {\n        if (file.name === 'article.html') {\n          article.title = torrent.name\n          article.text = file\n        } else {\n          article.media[file.name] = file\n        }\n      })\n\n      callback(article)\n    }\n\n    if (this.wt.get(infoHash)) {\n      onTorrent(this.wt.get(infoHash))\n    } else {\n      this.wt.add(infoHash, {\n        announce: this.announceURLs\n      }, onTorrent)\n    }\n  }\n}\n","import React, { Component } from 'react'\nimport { P2Wiki } from './p2wiki'\n\nclass Searchbar extends Component {\n  constructor (props) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n    this.getFromWiki = this.getFromWiki.bind(this)\n\n    this.state = {\n      title: '',\n      query: '',\n      result: '',\n      beAProxy: false\n    }\n\n    this.media = {}\n\n    this.retryInterval = null\n\n    var announceURLs = [\n      'wss://tracker.openwebtorrent.com',\n      'wss://tracker.sloppyta.co:443/announce',\n      'wss://tracker.novage.com.ua:443/announce',\n      'wss://tracker.btorrent.xyz:443/announce'\n    ]\n\n    if (window.location.hostname === 'localhost') { announceURLs = ['ws://localhost:5000'] }\n\n    this.p2wiki = new P2Wiki(announceURLs)\n\n    if (window.localStorage.getItem('beAProxy') === 'true') {\n      this.state.beAProxy = true\n      this.p2wiki.startProxy()\n    } else {\n      this.p2wiki.startClient()\n    }\n\n    var that = this\n    var url = document.location.pathname\n    var spli = url.split('/')\n\n    if (spli.length > 2 && spli[spli.length - 2] === 'wiki') {\n      setTimeout(function () {\n        that.urloli(spli[spli.length - 1])\n        that.getFromWiki()\n      }, 1000)\n    }\n  }\n\n  getFromWiki () {\n    if (this.state.query !== '') {\n      var $this = this\n\n      if (\n        this.p2wiki.requestArticle(\n          this.state.query,\n          function (res) {\n            $this.media = res.media\n            res.text.getBuffer((error, buffer) => {\n              $this.setState({\n                title: res.title,\n                result: buffer.toString()\n              })\n              if (error) { console.log(error) }\n            })\n          }\n        ) === false\n      ) {\n        console.log('nopeer, retrying in 3 seconds')\n        clearInterval(this.retryInterval)\n        this.retryInterval = setTimeout(this.getFromWiki, 3000)\n      }\n    }\n  }\n\n  handleSubmit (e) {\n    e.preventDefault()\n    console.log(this.state.query)\n\n    this.getFromWiki()\n  };\n\n  handleChange (e) {\n    const value =\n      e.target.type === 'checkbox' ? e.target.checked : e.target.value\n    this.setState({\n      [e.target.name]: value\n    })\n\n    if (e.target.name === 'beAProxy') {\n      window.localStorage.setItem('beAProxy', value)\n      window.location.reload()\n    }\n  }\n\n  urloli (e) {\n    this.setState({\n      query: e\n    })\n  }\n\n  render () {\n    const $this = this\n    const createMarkup = (html) => {\n      var parser = new window.DOMParser()\n      html = parser.parseFromString(html, 'text/html')\n\n      const images = html.querySelectorAll(\"a[class='image']\")\n      var filename\n      for (let i = 0; i < images.length; i++) {\n        filename = new URL(images[i].href).pathname.slice(6)\n\n        images[i].firstChild.src = ''\n\n        if ($this.media[filename]) {\n          $this.media[filename].renderTo(images[i].firstChild)\n        }\n      }\n\n      return { __html: html.body.innerHTML }\n    }\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <label style={{ paddingBottom:'15px' }} className='checkbox'>\n            <input\n              type='checkbox'\n              onChange={this.handleChange}\n              name='beAProxy'\n              checked={this.state.beAProxy}\n            />\n            <span style={{ marginLeft: '5px' }}>Be a Proxy Peer</span>\n          </label>\n          <div className='field'>\n            <div style={{textAlign: 'center'}} className='control'>\n              <input\n                className='input is-rounded'\n                id='query'\n                type='Text'\n                placeholder='🔍 Search for an article'\n                onChange={this.handleChange}\n                name='query'\n                value={this.state.query}\n              />\n            </div>\n          </div>\n        </form>\n        <div className='container mx-auto'>\n          <h1 className='title text-4xl'>{this.state.title}</h1>\n          <div dangerouslySetInnerHTML={createMarkup(this.state.result)} />\n        </div>\n      </div>\n    )\n  }\n}\nexport default Searchbar\n","import React, {Component} from 'react';\nimport Searchbar from './Search';\n\nimport './Main.scss';\n\nclass Main extends Component {\n  render() {\n    return (\n      <>\n        <div style={{textAlign: 'center'}}>\n          <h1 style={{color:`royalblue`, fontSize: '50px'}}>P2Wiki</h1>\n          <Searchbar/>\n        </div>\n        <footer className=\"footer\">\n          <div style={{textAlign: 'center'}}>\n            <p style={{color:`hotpink`}}>\n              P2Wiki made by Subin Siby, Pranav Shridhar and Athul Cyriac Ajay\n            </p>\n          </div>\n        </footer>\n      </>\n    );\n  }\n}\n\nexport default Main;","import React from 'react';\nimport './App.scss';\n\nimport Main from './components/Main';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","/**\n * Peer 2 Peer with webTorrents\n * Copyright Subin Siby <mail@subinsb.com>, 2020\n */\n\nconst WebSocketTracker = require('bittorrent-tracker/lib/client/websocket-tracker')\nconst randombytes = require('randombytes')\nconst EventEmitter = require('events')\nconst sha1 = require('simple-sha1')\nconst debug = require('debug')('p2pt')\n\n/**\n * This character would be prepended to easily identify JSON msgs\n */\nconst JSON_MESSAGE_IDENTIFIER = 'p'\n\n/**\n * WebRTC data channel limit beyond which data is split into chunks\n * Chose 16KB considering Chromium\n */\nconst MAX_MESSAGE_LENGTH = 16000\n\nexport class P2PT extends EventEmitter {\n  /**\n   *\n   * @param array announceURLs List of announce tracker URLs\n   * @param string identifierString Identifier used to discover peers in the network\n   */\n  constructor (announceURLs = [], identifierString = '') {\n    super()\n\n    this.announceURLs = announceURLs\n    this.trackers = {}\n    this.peers = {}\n    this.msgChunks = {}\n    this.responseWaiting = {}\n\n    if (identifierString) { this.setIdentifier(identifierString) }\n\n    this._peerIdBuffer = randombytes(20)\n    this._peerId = this._peerIdBuffer.toString('hex')\n    this._peerIdBinary = this._peerIdBuffer.toString('binary')\n  }\n\n  /**\n   * Set the identifier string used to discover peers in the network\n   * @param string identifierString\n   */\n  setIdentifier (identifierString) {\n    this.identifierString = identifierString\n    this.infoHash = sha1.sync(identifierString).toLowerCase()\n    this._infoHashBuffer = Buffer.from(this.infoHash, 'hex')\n    this._infoHashBinary = this._infoHashBuffer.toString('binary')\n  }\n\n  /**\n   * Connect to network and start discovering peers\n   */\n  start () {\n    const $this = this\n\n    this.on('peer', (peer) => {\n      var newpeer = false\n      if (!$this.peers[peer.id]) {\n        newpeer = true\n        $this.peers[peer.id] = {}\n        $this.responseWaiting[peer.id] = {}\n      }\n\n      peer.on('connect', () => {\n        /**\n         * Multiple data channels to one peer is possible\n         * The `peer` object actually refers to a peer with a data channel. Even though it may have same `id` (peerID) property, the data channel will be different. Different trackers giving the same \"peer\" will give the `peer` object with different channels.\n         * We will store all channels as backups in case any one of them fails\n         * A peer is removed if all data channels become unavailable\n         */\n        $this.peers[peer.id][peer.channelName] = peer\n\n        if (newpeer) {\n          $this.emit('peerconnect', peer)\n        }\n      })\n\n      peer.on('data', (data) => {\n        $this.emit('data', peer, data)\n\n        data = data.toString()\n\n        debug('got a message from ' + peer.id)\n\n        if (data[0] === JSON_MESSAGE_IDENTIFIER) {\n          try {\n            data = JSON.parse(data.slice(1))\n\n            // A respond function\n            peer.respond = $this._peerRespond(peer, data.id)\n\n            var chunkHandler = $this._chunkHandler(data)\n\n            if (chunkHandler !== false) {\n              /**\n               * If there's someone waiting for a response, call them\n               */\n              if ($this.responseWaiting[peer.id][data.id]) {\n                $this.responseWaiting[peer.id][data.id]([peer, chunkHandler])\n                delete $this.responseWaiting[peer.id][data.id]\n              } else {\n                $this.emit('msg', peer, chunkHandler)\n              }\n              $this._destroyChunks(data.id)\n            }\n          } catch (e) {\n            console.log(e)\n          }\n        }\n      })\n\n      peer.on('error', (err) => {\n        $this.removePeer(peer)\n        debug('Error in connection : ' + err)\n      })\n\n      peer.on('close', () => {\n        $this.removePeer(peer)\n        debug('Connection closed with ' + peer.id)\n      })\n    })\n\n    this._fetchPeers()\n  }\n\n  /**\n   * Remove a peer from the list if all channels are closed\n   * @param integer id Peer ID\n   */\n  removePeer (peer) {\n    delete this.peers[peer.id][peer.channelName]\n\n    // All data channels are gone. Peer lost\n    if (this.peers[peer.id].length === 0) {\n      this.emit('peerclose', peer)\n\n      delete this.responseWaiting[peer.id]\n      delete this.peers[peer.id]\n    }\n  }\n\n  /**\n   * Send a msg and get response for it\n   * @param Peer peer simple-peer object to send msg to\n   * @param string msg Message to send\n   * @param integer msgID ID of message if it's a response to a previous message\n   */\n  send (peer, msg, msgID = '') {\n    const $this = this\n\n    return new Promise((resolve, reject) => {\n      var data = {\n        id: msgID !== '' ? msgID : Math.floor(Math.random() * 100000 + 100000),\n        msg: msg\n      }\n\n      try {\n        /**\n         * Maybe peer channel is closed, so use a different channel if available\n         * Array should atleast have one channel, otherwise peer connection is closed\n         */\n        if (!peer.connected) {\n          peer = $this.peers[peer.id][0]\n        }\n\n        $this.responseWaiting[peer.id][data.id] = resolve\n      } catch {\n        return reject(Error('Connection to peer closed'))\n      }\n\n      var chunks = 0\n      var remaining = ''\n      while (data.msg.length > 0) {\n        data.c = chunks\n\n        remaining = data.msg.slice(MAX_MESSAGE_LENGTH)\n        data.msg = data.msg.slice(0, MAX_MESSAGE_LENGTH)\n\n        if (!remaining) { data.last = true }\n\n        peer.send(JSON_MESSAGE_IDENTIFIER + JSON.stringify(data))\n\n        data.msg = remaining\n        chunks++\n      }\n\n      debug('sent a message to ' + peer.id)\n    })\n  }\n\n  /**\n   * Request more peers\n   */\n  requestMorePeers () {\n    const $this = this\n    return new Promise((resolve) => {\n      for (var key in $this.trackers) {\n        $this.trackers[key].announce({\n          numwant: 50\n        })\n      }\n      resolve($this.peers)\n    })\n  }\n\n  /**\n   * Destroy object\n   */\n  destroy () {\n    var key\n    for (key in this.peers) {\n      for (var key2 in this.peers[key]) {\n        this.peers[key][key2].destroy()\n      }\n    }\n    for (key in this.trackers) {\n      this.trackers[key].destroy()\n    }\n  }\n\n  /**\n   * A custom function binded on Peer object to easily respond back to message\n   * @param Peer peer Peer to send msg to\n   * @param integer msgID Message ID\n   */\n  _peerRespond (peer, msgID) {\n    var $this = this\n    return (msg) => {\n      return $this.send(peer, msg, msgID)\n    }\n  }\n\n  /**\n   * Handle msg chunks. Returns false until the last chunk is received. Finally returns the entire msg\n   * @param object data\n   */\n  _chunkHandler (data) {\n    if (!this.msgChunks[data.id]) {\n      this.msgChunks[data.id] = []\n    }\n\n    this.msgChunks[data.id][data.c] = data.msg\n\n    if (data.last) {\n      var completeMsg = this.msgChunks[data.id].join('')\n      return completeMsg\n    } else {\n      return false\n    }\n  }\n\n  /**\n   * Remove all stored chunks of a particular message\n   * @param integer msgID Message ID\n   */\n  _destroyChunks (msgID) {\n    delete this.msgChunks[msgID]\n  }\n\n  /**\n   * Default announce options\n   * @param object opts Options\n   */\n  _defaultAnnounceOpts (opts = {}) {\n    if (opts.numwant == null) opts.numwant = 50\n\n    if (opts.uploaded == null) opts.uploaded = 0\n    if (opts.downloaded == null) opts.downloaded = 0\n\n    return opts\n  }\n\n  /**\n   * Initialize trackers and fetch peers\n   */\n  _fetchPeers () {\n    for (var key in this.announceURLs) {\n      this.trackers[key] = new WebSocketTracker(this, this.announceURLs[key])\n      this.trackers[key].announce({\n        numwant: 50\n      })\n    }\n  }\n}"],"sourceRoot":""}